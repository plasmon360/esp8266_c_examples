// Simple server that sends a response when connected

#include "osapi.h"
#include "ip_addr.h"
#include "espconn.h"
#include "os_type.h"
#include "user_interface.h"
#include "driver/uart.h"


char plotly_username[] = "balu";
char plotly_key[] = "e62s09239n";
char plotly_rest_api_home[] = "/clientresp";
char plotly_host[] = "plot.ly";
char ur_ssid = "plasmon"
char ur_ssid_password = "nanophotonics"

ip_addr_t plotly_server_ip;
struct espconn plotly_conn;
esp_tcp tcp1; // creates a esp_tcp structure


// Function that will run after initialization is done, contains information to connect to the WIFI
LOCAL void initDone()
{
    wifi_set_opmode_current(STATION_MODE);
    struct station_config stationConfig;
    strncpy(stationConfig.ssid, ur_ssid, 32);
    strncpy(stationConfig.password, ur_password, 64);
    wifi_station_set_config(&stationConfig);
    wifi_station_connect();
}

// callback when a connection happens
LOCAL void connectCB(void *arg)
{
    struct espconn *pNewEspConn = (struct espconn *)arg; // Type casting the argument to espconn structure type. This structure is 		unique for each connection
    os_printf("made a connection");
    char send_data_buffer[2048];
    char text_data[500];
    uint32_t x = 1;//system_get_rtc_time(void);
    uint32_t y = 20;
    os_sprintf(text_data,"un=%s&key=%s&origin=plot&platform=esp8266_c&args=[{\"x\":[%d], \"y\":[%d]}]&kwargs={\"filename\": \"test plot from esp-8266\",\"fileopt\": \"extend\"}",plotly_username, plotly_key, x, y);
   os_sprintf(send_data_buffer, "POST %s HTTP/1.1\r\nHost: %s\r\nConnection: close\r\nContent-Length: %d\r\n\r\n%s", plotly_rest_api_home, plotly_host, strlen(text_data), text_data);
    os_printf("%s",send_data_buffer);
    espconn_send(pNewEspConn, send_data_buffer, sizeof(send_data_buffer));
}

// callback when a connection breaks
LOCAL void disconnectCB(void *arg)
{
    struct espconn *pNewEspConn = (struct espconn *)arg; // Type casting the argument to espconn structure type. This structure is 		unique for each connection
    os_printf("Connection with plotly broken");
}


//callback when data is recieved
LOCAL void recieveCB(void *arg,char *pData,unsigned short len)
{
    struct espconn *pNewEspConn = (struct espconn *)arg;
    os_printf("Received data!! - length = %d\n\r", len);
    os_printf("from IP address: %d. %d. %d. %d \n\r", IP2STR(&(pNewEspConn->proto.tcp->remote_ip)));
    int i=0;
    for (i=0; i<len; i++)   // Read data by each character and print it on the debug screen
    {
        os_printf("%c", pData[i]);
    }
    os_printf("\n");
}

//callback when data is sent
LOCAL void sentCB(void *arg)
{
    os_printf("Request was successfully sent\n\r");
}


void
find_plotly_dns_and_make_connection(const char *name, ip_addr_t *ipaddr, void *arg)
{
    struct espconn *conn = (struct espconn *)arg;	// get the corresponding connected control block structure and type cast it
    if (ipaddr != NULL)
    {

        os_printf("DNS for %s found and the ip is : %d.%d.%d.%d\n",name,
                  *((uint8 *)&ipaddr->addr), *((uint8 *)&ipaddr->addr + 1),
                  *((uint8 *)&ipaddr->addr + 2), *((uint8 *)&ipaddr->addr + 3));
        os_printf("test");
        tcp1.local_port = espconn_port(); // An open port
        tcp1.remote_port = 80;
        os_memcpy(&(tcp1.remote_ip),&ipaddr->addr,4); // remote_ip is unit8[4] and ipaddr->addr is uint32, we need memory copy which needs pointers
        os_printf("%d,%d,%d,%d",IP2STR(&tcp1.remote_ip));

        conn->proto.tcp = &tcp1; // pointer to tcp instance

        conn->type = ESPCONN_TCP; // what kind of transport protocol? tcp or UDP


        conn->state = ESPCONN_NONE;// Set it to this state
        espconn_regist_connectcb(conn, connectCB); // register a callback when a connection is fornmed
        espconn_regist_disconcb(conn, disconnectCB); // register a callback when a connection is disconected
        espconn_connect(conn);// make a connection
        espconn_regist_recvcb(conn,recieveCB); // register a callback when one recieves data from remote connection
        espconn_regist_sentcb(conn, sentCB); // register a callback to send data to a remote connection
        os_printf("done with dns");
    }
    else
    {
        os_printf("DNS not found");
    }
}



// This the wifi event handler
LOCAL void eventHandler(System_Event_t *evt)
{
    switch(evt->event)
    {
    case EVENT_STAMODE_CONNECTED:
        os_printf("Event: EVENT_STAMODE_CONNECTED");
        os_printf("connect to ssid %s, channel %d\n",
                  evt->event_info.connected.ssid,
                  evt->event_info.connected.channel);
        const char* possible_status[] =
        {
            "STATION_IDLE" ,
            "STATION_CONNECTING",
            "STATION_WRONG_PASSWORD",
            "STATION_NO_AP_FOUND",
            "STATION_CONNECT_FAIL",
            "STATION_GOT_IP"
        };
        os_printf("Status: %s\n\r", possible_status[wifi_station_get_connect_status()]);
        break;
    case EVENT_STAMODE_DISCONNECTED:
        os_printf("Event: EVENT_STAMODE_DISCONNECTED");
        break;
    case EVENT_STAMODE_AUTHMODE_CHANGE:
        os_printf("Event: EVENT_STAMODE_AUTHMODE_CHANGE");
        break;
    case EVENT_STAMODE_GOT_IP:
        os_printf("Event: EVENT_STAMODE_GOT_IP");
        struct ip_info info ;
        wifi_get_ip_info(STATION_IF, &info);
        espconn_gethostbyname(&plotly_conn,plotly_host, &plotly_server_ip,find_plotly_dns_and_make_connection); // Look for plotly ip address
        break;
    case EVENT_SOFTAPMODE_STACONNECTED:
        os_printf("Event: EVENT_SOFTAPMODE_STACONNECTED");
        struct ip_info ipconfig;
        wifi_get_ip_info(STATION_IF, &ipconfig);
        break;
    case EVENT_SOFTAPMODE_STADISCONNECTED:
        os_printf("Event: EVENT_SOFTAPMODE_STADISCONNECTED");
        break;
    default:
        os_printf("Unexpected event: %d\r\n", evt->event);
        break;
    }
}


//Init function. This is where the program enters
void ICACHE_FLASH_ATTR user_init()
{
    uart_init(BIT_RATE_115200, BIT_RATE_115200); // set the baud rate for UART0 and UART1, I will use UART1 for debugging and UART0 for flashing
    os_printf("Hello !\n\r");
    os_printf("Chip Id: %lu\n\r", system_get_chip_id()); //Prints chip ID
    os_printf("SDK Version: %s\n\r", system_get_sdk_version()); // Gets the sdk version
    system_init_done_cb(initDone);
    wifi_set_event_handler_cb(eventHandler);
}
