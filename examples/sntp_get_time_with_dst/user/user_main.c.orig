// Get Time from a sntp server every 5 sec and print it

#include "osapi.h"
#include "ip_addr.h"
#include "os_type.h"
#include "user_interface.h"
#include "driver/uart.h"
#include "driver/sntp.h"
#include "time.h" // use this only to make time structure from time since epoch. Except mktime and gmtime, I cannot seem to use the other functions such as strftime, when used I am getting an error "undefined reference to `_sbrk_r'"

// Wifi details
char ur_ssid[] = "ur_ssid";
char ur_ssid_password[] = "ur_wifi_password";

//Timer
os_timer_t mytimer; // Structure for a timer

//sntp timezone settings
uint32 sntptime_since_epoch;
uint32 localtime_since_epoch;
sint8 utc_timezone =
    0; // will use this for sntp_timezone function for returning UTC time instead of default UTC+8 (china)
sint8 timezone_offset =
    -8;// anywhere between -11 to 13 with respect to GMT/UTC. Pacific time is GMT-8
sint8 dst_offset;
sint8 dst_offset_hours =
    1;  // How many hours you want to offset. In usa it is 1 hour


// time.h
time_t rawtime_since_epoch, rawtime_since_epoch_with_dst;
struct tm * current_time_without_dst;
struct tm * current_time_with_dst;
struct tm dst_start;
struct tm dst_end;


// http://hackaday.com/2012/07/16/automatic-daylight-savings-time-compensation-for-your-clock-projects/
int dow(int y, int m, int d)
{
    static int t[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
    y -= m < 3;
    return (y + y/4 - y/100 + y/400 + t[m-1] + d) % 7;
}
int NthDate(int year, int month, int DOW, int NthWeek)
{
    int targetDate = 1;
    int firstDOW = dow(year,month,targetDate);
    while (firstDOW != DOW)
        {
            firstDOW = (firstDOW+1)%7;
            targetDate++;
        }
    //Adjust for weeks
    targetDate += (NthWeek-1)*7;
    return targetDate;
}
//


sint8 dst_check(struct tm * timeptr)
{
    dst_start.tm_year = timeptr->tm_year;
    dst_end.tm_year = timeptr->tm_year;
    sint16 year =  (sint16)1900+timeptr->tm_year;
    dst_start.tm_mday= NthDate(year, 4, 0,
                               2); // returns the day of the second(2) sunday(0) of April(4) for a given yea
    dst_end.tm_mday=NthDate(year, 11, 0,
                            1); // returns the day of the first(1) sunday(0) of November(11) for a given year
    os_printf ("DST is observed between: %4d-%02d-%02d  %02d:%02d:%02d %4d-%02d-%02d  %02d:%02d:%02d    \n",
               1900+dst_start.tm_year, dst_start.tm_mon+1,dst_start.tm_mday,dst_start.tm_hour,
               dst_start.tm_min,dst_start.tm_sec, 1900+dst_end.tm_year, dst_end.tm_mon+1,
               dst_end.tm_mday,dst_end.tm_hour, dst_end.tm_min,dst_end.tm_sec);
    if (mktime(timeptr)>=mktime(&dst_start) && mktime(timeptr)<=mktime(&dst_end))
        dst_offset = dst_offset_hours; // set the dst offset
    else
        dst_offset = 0; // no dst offset
    return dst_offset;
}

// Function that will return the timestamp
char* ICACHE_FLASH_ATTR sntp_current_time()
{
    sntptime_since_epoch =  sntp_get_current_timestamp();
    localtime_since_epoch = sntptime_since_epoch+(timezone_offset)
                            *3600;// compensate for time zone
    rawtime_since_epoch = (time_t)
                          localtime_since_epoch; // type cast to time_t type
    current_time_without_dst = gmtime(&rawtime_since_epoch);
    dst_offset = dst_check(current_time_without_dst);
    if (dst_offset==1)
        {
            os_printf("You are in dst period. %d hours are added\n", dst_offset_hours);
        }
    else if (dst_offset ==0)
        {
            os_printf("You are not in dst period");
        }
    rawtime_since_epoch_with_dst = rawtime_since_epoch
                                   +dst_offset*3600; // compensate for dst_offset_hours
    current_time_with_dst = gmtime(&rawtime_since_epoch_with_dst);
    os_printf ("Local time : %4d-%02d-%02d  %02d:%02d:%02d\n",
               1900+current_time_with_dst->tm_year, current_time_with_dst->tm_mon+1,
               current_time_with_dst->tm_mday,current_time_with_dst->tm_hour,
               current_time_with_dst->tm_min,current_time_with_dst->tm_sec );
}

// Function that will run after initialization is done, contains information to connect to the WIFI
LOCAL void initDone()
{
    wifi_set_opmode_current(STATION_MODE);
    struct station_config stationConfig;
    strncpy(stationConfig.ssid, ur_ssid, 32);
    strncpy(stationConfig.password, ur_ssid_password, 64);
    wifi_station_set_config(&stationConfig);
    wifi_station_connect();
    // Set the servers name for the sntp time
    sntp_setservername(0, "us.pool.ntp.org"); // set server 0 by domain name
    sntp_setservername(1, "montpelier.caltech.edu"); // set server 1 by domain name
    sntp_setservername(2,"time-d.nist.gov");
    sntp_stop();
    sntp_set_timezone(utc_timezone);// set the timezone to utc
    sntp_init();
    // Parameters of the dst start and end. We set all parameters that are constant. We set year and the day when dst starts and ends in dst_check method.
    dst_start.tm_mon=4-1; // April is 3
    dst_start.tm_hour=2;//at 2 AM
    dst_start.tm_min=0;
    dst_start.tm_sec=0;
    dst_start.tm_isdst = -1;
    // Parameters of the dst end.
    dst_end.tm_mon=11-1; // Nov is 10
    dst_end.tm_hour=2;//at 2 AM
    dst_end.tm_min=0;
    dst_start.tm_sec=0;
    dst_end.tm_isdst = -1;
}
//Call back for our timer
LOCAL void ICACHE_FLASH_ATTR timer_function(void *arg)
{
    sntp_current_time();
}
//Set up a timer
void timer()
{
    os_timer_disarm(&mytimer); // disarm any timer
    os_timer_setfn(&mytimer, (os_timer_func_t *)timer_function,
                   NULL);	// associate a callback for a timer
    os_timer_arm(&mytimer, 5000,
                 1); // arm the timer. every 5sec, the callback function will be called.
}
// This the wifi event handler
void eventHandler(System_Event_t *evt)
{
    switch(evt->event)
        {
        case EVENT_STAMODE_CONNECTED:
            os_printf("Event: EVENT_STAMODE_CONNECTED");
            os_printf("connect to ssid %s, channel %d\n",
                      evt->event_info.connected.ssid,
                      evt->event_info.connected.channel);
            const char* possible_status[] =
            {
                "STATION_IDLE" ,
                "STATION_CONNECTING",
                "STATION_WRONG_PASSWORD",
                "STATION_NO_AP_FOUND",
                "STATION_CONNECT_FAIL",
                "STATION_GOT_IP"
            };
            os_printf("Status: %s\n\r", possible_status[wifi_station_get_connect_status()]);
            break;
        case EVENT_STAMODE_DISCONNECTED:
            os_printf("Event: EVENT_STAMODE_DISCONNECTED");
            break;
        case EVENT_STAMODE_AUTHMODE_CHANGE:
            os_printf("Event: EVENT_STAMODE_AUTHMODE_CHANGE");
            break;
        case EVENT_STAMODE_GOT_IP:
            os_printf("Event: EVENT_STAMODE_GOT_IP");
            timer(); 	// Start the timer
            break;
        case EVENT_SOFTAPMODE_STACONNECTED:
            os_printf("Event: EVENT_SOFTAPMODE_STACONNECTED");
            struct ip_info ipconfig;
            wifi_get_ip_info(STATION_IF, &ipconfig);
            break;
        case EVENT_SOFTAPMODE_STADISCONNECTED:
            os_printf("Event: EVENT_SOFTAPMODE_STADISCONNECTED");
            break;
        default:
            os_printf("Unexpected event: %d\r\n", evt->event);
            break;
        }
}
//Init function. This is where the program enters
void ICACHE_FLASH_ATTR user_init()
{
    uart_init(BIT_RATE_115200,
              BIT_RATE_115200); // set the baud rate for UART0 and UART1, I will use UART1 for debugging and UART0 for flashing
    os_printf("Hello !\n\r");
    os_printf("Chip Id: %lu\n\r", system_get_chip_id()); //Prints chip ID
    os_printf("SDK Version: %s\n\r",
              system_get_sdk_version()); // Gets the sdk version
    system_init_done_cb(initDone);
    wifi_set_event_handler_cb(eventHandler);
}
